.switch input {
opacity: 0;
width: 0;
height: 0;
}
/* The slider */
.slider {
position: absolute;
cursor: pointer;
top: 0;
left: 0;
right: 0;
bottom: 0;
background-color: #ccc;
transition: .4s;
border-radius: 34px;
background-image: url('italy.png'); /* Default background image */
background-size: cover; /* Ensure the image fits */
background-position: center; /* Center the image */
}
/* Slider for when the input is checked */
input:checked + .slider {
background-image: url('united-kingdom.png'); /* Image when toggled on */
background-color: #2196F3; /* Optional background color */
}
/* Rounded corners for the switch slider */
.slider.round {
border-radius: 34px;
}
.slider.round:before {
content: '';
position: absolute;
height: 26px;
width: 26px;
left: 4px;
bottom: 4px;
background-color: white;
border-radius: 50%;
transition: .4s;
}
/* Moving the knob when checked */
input:checked + .slider:before {
transform: translateX(26px);
}
")
),
titlePanel("Toggle Switch with Image Background"),
# Custom toggle switch
div(
class = "switch",
tags$input(type = "checkbox", id = "imageToggle"),
tags$label(
`for` = "imageToggle",
class = "slider round"
)
)
)
server <- function(input, output, session) {
# Server logic (if needed) can be added here
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
tags$style(
HTML("
/* Toggle switch container */
.switch {
position: relative;
display: inline-block;
width: 60px;
height: 34px;
}
/* Hide default HTML checkbox */
.switch input {
opacity: 0;
width: 0;
height: 0;
}
/* The slider (background of the switch) */
.slider {
position: absolute;
cursor: pointer;
top: 0;
left: 0;
right: 0;
bottom: 0;
background-color: #ccc;
transition: .4s;
border-radius: 34px;
background-image: url('www/italy.png'); /* Correct path for image */
background-size: cover;
background-position: center;
}
/* Slider background when the input is checked */
input:checked + .slider {
background-image: url('www/united-kingdom.png'); /* Correct path for checked state image */
background-color: #2196F3; /* Optional background color */
}
/* The white knob (dot) */
.slider.round:before {
content: '';
position: absolute;
height: 20px;  /* Smaller dot */
width: 20px;   /* Smaller dot */
left: 4px;
top: 50%;      /* Align to middle */
transform: translateY(-50%); /* Center vertically */
background-color: white;
border-radius: 50%;
transition: .4s;
}
/* Move the white knob when checked */
input:checked + .slider:before {
left: calc(100% - 24px); /* Ensure the knob moves to the right */
}
")
),
titlePanel("Toggle Switch with Correct Image Paths"),
# Custom toggle switch
div(
class = "switch",
tags$input(type = "checkbox", id = "imageToggle"),
tags$label(
`for` = "imageToggle",
class = "slider round"
)
)
)
server <- function(input, output, session) {
# Server logic (if needed) can be added here
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
tags$style(
HTML("
/* Toggle switch container */
.switch {
position: relative;
display: inline-block;
width: 60px;
height: 34px;
}
/* Hide default HTML checkbox */
.switch input {
opacity: 0;
width: 0;
height: 0;
}
/* The slider (background of the switch) */
.slider {
position: absolute;
cursor: pointer;
top: 0;
left: 0;
right: 0;
bottom: 0;
background-color: #ccc;
transition: .4s;
border-radius: 34px;
background-image: url('italy.png'); /* Direct path to image in www folder */
background-size: cover;
background-position: center;
}
/* Slider background when the input is checked */
input:checked + .slider {
background-image: url('united-kingdom.png'); /* Image when toggled on */
background-color: #2196F3; /* Optional background color */
}
/* The white knob (dot) */
.slider.round:before {
content: '';
position: absolute;
height: 20px;  /* Smaller dot */
width: 20px;   /* Smaller dot */
left: 4px;
top: 50%;      /* Align to middle */
transform: translateY(-50%); /* Center vertically */
background-color: white;
border-radius: 50%;
transition: .4s;
}
/* Move the white knob when checked */
input:checked + .slider:before {
left: calc(100% - 24px); /* Ensure the knob moves to the right */
}
")
),
titlePanel("Toggle Switch with Image Background"),
# Custom toggle switch
div(
class = "switch",
tags$input(type = "checkbox", id = "imageToggle"),
tags$label(
`for` = "imageToggle",
class = "slider round"
)
)
)
server <- function(input, output, session) {
# Server logic (if needed) can be added here
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
# Title panel
titlePanel("Toggle Between Italian and UK Flags"),
# Button that will toggle between two flags
actionButton("toggleButton", label = "",
style = "background-color: transparent; border: none;",  # Make button transparent
tags$img(src = 'italy.png', height = "50px", id = "flag_image")),
# Output to show which flag is currently displayed
textOutput("flagStatus"),
tags$script(HTML("
// JavaScript function to toggle the flag image when button is clicked
Shiny.addCustomMessageHandler('toggleFlag', function(flag) {
var img = document.getElementById('flag_image');
if(flag === 'italy') {
img.src = 'italy.png';  // Show Italy flag
} else {
img.src = 'united-kingdom.png';  // Show UK flag
}
});
"))
)
library(shiny)
ui <- fluidPage(
# Title panel
titlePanel("Toggle Between Italian and UK Flags"),
# Button that will toggle between two flags
actionButton("toggleButton", label = "",
style = "background-color: transparent; border: none;",  # Make button transparent
tags$img(src = 'italy.png', height = "50px", id = "flag_image")),
# Output to show which flag is currently displayed
textOutput("flagStatus"),
tags$script(HTML("
// JavaScript function to toggle the flag image when button is clicked
Shiny.addCustomMessageHandler('toggleFlag', function(flag) {
var img = document.getElementById('flag_image');
if(flag === 'italy') {
img.src = 'italy.png';  // Show Italy flag
} else {
img.src = 'united-kingdom.png';  // Show UK flag
}
});
"))
)
library(shiny)
ui <- fluidPage(
# Title panel
titlePanel("Toggle Between Italian and UK Flags"),
# Button that will toggle between two flags
actionButton("toggleButton", "Toggle Flag",
style = "background-color: #f8f9fa; border: none;"),
# Image showing the current flag
img(src = 'italy.png', height = "50px", id = "flag_image"),
# Output to show which flag is currently displayed
textOutput("flagStatus"),
tags$script(HTML("
// JavaScript function to toggle the flag image when button is clicked
Shiny.addCustomMessageHandler('toggleFlag', function(flag) {
var img = document.getElementById('flag_image');
if(flag === 'italy') {
img.src = 'italy.png';  // Show Italy flag
} else {
img.src = 'united-kingdom.png';  // Show UK flag
}
});
"))
)
server <- function(input, output, session) {
# Reactive value to store the current flag state
flagState <- reactiveVal("italy")  # Start with Italy flag
# Toggle flag when the button is clicked
observeEvent(input$toggleButton, {
if(flagState() == "italy") {
flagState("uk")  # Switch to UK flag
} else {
flagState("italy")  # Switch back to Italy flag
}
# Send the new flag state to the client to change the image
session$sendCustomMessage("toggleFlag", flagState())
})
# Output the current flag status
output$flagStatus <- renderText({
if (flagState() == "italy") {
"Currently showing: Italy Flag"
} else {
"Currently showing: UK Flag"
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
# Title panel
titlePanel("Toggle Between Italian and UK Flags"),
# Button that will toggle between two flags
actionButton("toggleButton",
label = NULL,  # No text label
tags$img(src = 'italy.png', height = "50px", id = "flag_image"),
style = "background-color: transparent; border: none; cursor: pointer;"),
# Output to show which flag is currently displayed
textOutput("flagStatus"),
tags$script(HTML("
// JavaScript function to toggle the flag image when button is clicked
Shiny.addCustomMessageHandler('toggleFlag', function(flag) {
var img = document.getElementById('flag_image');
if(flag === 'italy') {
img.src = 'italy.png';  // Show Italy flag
} else {
img.src = 'united-kingdom.png';  // Show UK flag
}
});
"))
)
library(shiny)
ui <- fluidPage(
# Title panel
titlePanel("Toggle Between Italian and UK Flags"),
# Custom button that will toggle between two flags
tags$div(
style = "display: inline-block; cursor: pointer;",
id = "toggleButton",
tags$img(src = 'italy.png', height = "50px", id = "flag_image")
),
# Output to show which flag is currently displayed
textOutput("flagStatus"),
tags$script(HTML("
// Toggle the flag image when the custom button is clicked
document.getElementById('toggleButton').onclick = function() {
Shiny.setInputValue('toggleFlag', Math.random());
};
Shiny.addCustomMessageHandler('toggleFlag', function(flag) {
var img = document.getElementById('flag_image');
if(flag === 'italy') {
img.src = 'italy.png';  // Show Italy flag
} else {
img.src = 'united-kingdom.png';  // Show UK flag
}
});
"))
)
server <- function(input, output, session) {
# Reactive value to store the current flag state
flagState <- reactiveVal("italy")  # Start with Italy flag
# Toggle flag when the custom button is clicked
observeEvent(input$toggleFlag, {
if(flagState() == "italy") {
flagState("uk")  # Switch to UK flag
} else {
flagState("italy")  # Switch back to Italy flag
}
# Send the new flag state to the client to change the image
session$sendCustomMessage("toggleFlag", flagState())
})
# Output the current flag status
output$flagStatus <- renderText({
if (flagState() == "italy") {
"Currently showing: Italy Flag"
} else {
"Currently showing: UK Flag"
}
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- c("Piemonte" = "Piemonte",
"Valle d'Aosta/Vallée d'Aoste" = "Valle d'Aosta/Vallée d'Aoste",
"Lombardia" = "Lombardia",
"Trentino-Alto Adige/Südtirol" = "Trentino-Alto Adige/Südtirol",
"Veneto" = "Veneto",
"Friuli-Venezia Giulia" = "Friuli-Venezia Giulia",
"Liguria" = "Liguria",
"Emilia-Romagna" = "Emilia-Romagna",
"Toscana" = "Toscana",
"Umbria" = "Umbria",
"Marche" = "Marche",
"Lazio" = "Lazio",
"Abruzzo" = "Abruzzo",
"Molise" = "Molise",
"Campania" = "Campania",
"Puglia" = "Puglia",
"Basilicata" = "Basilicata",
"Calabria" = "Calabria",
"Sicilia" = "Sicilia",
"Sardegna" = "Sardegna",
"Total" = "Totale"
)
View(ui)
x
x[1]
x$Total
x$Totale
x["Totale"]
x["Total"]
"Totale" %in% x
x == "Totale"
x[x == "Totale"]
name(x[x == "Totale"])
names(x[x == "Totale"])
runApp()
runApp()
runApp()
traceback()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
traceback()
runApp()
lista_input1eng[lista_input1eng=="Pil reale"]
names(lista_input1eng[lista_input1eng=="Pil reale"])
runApp()
runApp()
runApp()
lista_input1eng <- c("Real GDP" = "Pil reale",
"Nominal GDP" = "Pil nominale",
"Debt" = "Debito",
"Deficit (-)/Surplus(+)" = "Deficit (-)/Surplus(+)",
"Primary Deficit(-)/Surplus(+)" = "Deficit(-)/Surplus(+) primario",
"Interest expenditure" = "Spesa per interessi",
"Variation in debt" = "Variazione debito",
"Agg. stock flow" = "Agg. stock flussi",
"Real growth rate (r)" = "Tasso di crescita reale (r)",
"Nominal growth rate (g)" = "Tasso crescita nominale (g)",
"Deflator" = "Deflatore",
"Implicit interest (i)" = "Interessi impliciti (i)",
"Domestic currency debt" = "Debito in valuta domestica",
"Foreign currency debt" = "Debito in valuta estera",
"Operational Deficit (-)/Surplus(+)" = "Deficit (-)/Surplus(+) operativo",
"Per capita debt" = "Debito pro capite")
names(lista_input1eng[
lista_input1eng=="Debito"])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage(
# Action button with tooltip using the title attribute
actionButton("toggleButton", "Click me",
style = "cursor: pointer;",
title = "Click to toggle the flag"),  # Tooltip added here
textOutput("flagStatus")
)
server <- function(input, output, session) {
# Reactive value to store the current flag state
flagState <- reactiveVal("italy")  # Start with Italy flag
# Toggle flag when the action button is clicked
observeEvent(input$toggleButton, {
if (flagState() == "italy") {
flagState("uk")  # Switch to UK flag
} else {
flagState("italy")  # Switch back to Italy flag
}
})
# Output the current flag status
output$flagStatus <- renderText({
if (flagState() == "italy") {
"Currently showing: Italy Flag"
} else {
"Currently showing: UK Flag"
}
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
